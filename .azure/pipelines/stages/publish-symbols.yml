# publish-symbols.yml
# Description: Defines a stage for publishing symbols to SymWeb and the Microsoft symbol server (MSDL)
# Parameters:
#   artifacts: [ string ]
#     Names of artifacts containing symbol packages of interest
#   condition: string
#     A condition which can be used to skip the job completely
#   dependsOn: string | [ string ]
#     For fan-out/fan-in. See
#     https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml#dependencies
#   jobDisplayName: string
#     Friendly name of the single job in this stage to display in the UI. Defaults to "Publish symbols".
#   stageDisplayName: string
#     Friendly stage name to display in the UI. Defaults to "Publish symbols stage".
#   stageDisplayName: string
#     Name of this stage. Defaults to the empty string. Useful when other stages depend on this one. See
#     https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml#dependencies

parameters:
  artifacts: []
  condition: ''
  dependsOn: ''
  jobDisplayName: Publish symbols
  stageDisplayName: Publish symbols stage
  stageName: ''

stages:
- stage: ${{ parameters.stageName }}
  condition: ${{ parameters.condition }}
  dependsOn: ${{ parameters.dependsOn }}
  displayName: ${{ parameters.stageDisplayName }}
  jobs:
  - template: ../jobs/default-build.yml
    parameters:
      agentOs: Windows
      codeSign: false
      installJdk: false
      installNodeJs: false
      isTestingJob: false
      jobDisplayName: ${{ parameters.jobDisplayName }}
      jobName: '_'
      steps:
      - ${{ each artifact in parameters.artifacts }}:
        - task: DownloadBuildArtifacts@0
          displayName: Download ${{ artifact }} symbol packages
          inputs:
            artifactName: ${{ artifact }}
            downloadPath: $(Build.StagingDirectory)/symbols/
            itemPattern: '**/*.symbols.nupkg'
      - powershell: |
          $globalJson = Get-Content ./global.json | ConvertFrom-Json
          $sdkVersion = $globalJson.'sdk'.'version'
          Write-Host "##vso[task.setvariable variable=sdkVersion]$sdkVersion"
        displayName: Determine DotNet SDK version
      - task: UseDotNet@2
        displayName: Install DotNet Core
        inputs:
          includePreviewVersions: true
          installationPath: $(Agent.TempDirectory)/dotnet
          packageType: sdk
          version: $(sdkVersion)
      - task: DotNetCoreCLI@2
        displayName: Restore symbol uploader
        inputs:
          command: custom
          custom: restore
          projects: eng/PublishSymbols.proj
          arguments: --source https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json --source https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
      - task: DotNetCoreCLI@2
        displayName: Execute symbol uploader
        inputs:
          command: custom
          custom: build
          projects: eng/PublishSymbols.proj
          arguments: >
            --no-restore
            "/p:SymbolDirectory=$(Build.StagingDirectory)/symbols/"
            "/p:MicrosoftSymbolServerPAT=$(microsoft-symbol-server-pat)"
            "/p:SymwebSymbolServerPAT=$(symweb-symbol-server-pat)"
